
   #############
  ##   HOWTO   ##
 ##  FRAMEWORK  ##
  ##    \o/    ##
   #############

After installing everything below, compiling COS should be as easy as

cd build
cmake ..
make
make install

If you are on windows, you can use the cmake gui application.
Here you can for instance generate a visual studio project.
After building is finished manually build the INSTALL project.

Some instructions below might be Linux specific.
For windows users, precompiled python libs can be found at http://www.lfd.uci.edu/~gohlke/pythonlibs/.

###################
# MATLAB AND CUDA #
###################

Install yourself:
   - Matlab (TODO: should remove dependency on matlab)
   - CUDA toolkit (and appropriate nVidia driver)
   - CUDA SDK

#########################
# ENVIRONMENT VARIABLES #
#########################

export MATLAB_ROOT=<your Matlab path>
export CUDA_TOOLKIT_ROOT_DIR=<cuda toolkit path, unless it's /usr/local/cuda or similar, then it's already OK)
export NVSDKCUDA_ROOT=<path to the 'C' folder in CUDA SDK"
export COS_ROOT=<path to the 'cos-code-dir'>
export COS_BUILD=<path to the 'cos-code-build-dir'>
export PYTHONPATH="${HOME}.local/lib/python<version>/site-packages:${PHDCODE_ROOT}/python"
export CMAKE_MODULE_PATH="/ifi/bifrost/a04/joibu/apps/cmake-2.8.8/Modules"
export LIBRARY_PATH="/ifi/bifrost/a04/joibu/apps/python2.7"
export PATH="${HOME}/.local/bin:$PATH:${CUDA_TOOLKIT_ROOT_DIR}/bin"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${HOME}/.local/lib:${CUDA_TOOLKIT_ROOT_DIR}/lib:${CUDA_TOOLKIT_ROOT_DIR}/lib64:${MATLAB_ROOT}/sys/os/glnxa64"
export MANPATH="${MANPATH}:${HOME}/.local/man"


export MKL_ROOT=<your MKL path>

#########
# CMake #
#########

wget http://www.cmake.org/files/v2.8/cmake-2.8.8.tar.gz
tar -xvf cmake-2.8.8.tar.gz
cd cmake-2.8.8
./configure --prefix=${HOME}/.local
gmake
gmake install

##########
# Python #
##########

wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
tar -xvf Python-2.7.3.tgz
cd Python-2.7.3
./configure --enable-shared --enable-unicode=ucs4 --prefix ${HOME}/.local
make
make install

(Make sure python is now in your path. Just do >> python --version )


On windows, check out http://www.lfd.uci.edu/~gohlke/pythonlibs/ for installing packages

#########
# Numpy #
#########

wget http://sourceforge.net/projects/numpy/files/NumPy/1.6.1/numpy-1.6.1.tar.gz/download
tar -xvf numpy-1.6.1.tar.gz
cd numpy-1.6.1
BLAS=None LAPACK=None ATLAS=None python setup.py build --fcompiler=gnu95
BLAS=None LAPACK=None ATLAS=None python setup.py install --prefix=${HOME}/.local


##########
# Cython #
##########

Note: You would need Cython 0.16 (There is a bug in 0.17). This might change for later versions.

wget http://cython.org/release/Cython-0.16.tar.gz
tar -xvf Cython-0.16.tar.gz
cd Cython-0.16
${HOME}/.local/bin/python setup.py install --prefix=${HOME}/.local

OR, since we're bleeding edge here:
git clone git://github.com/cython/cython.git cython-git
cd cython-git
${HOME}/.local/bin/python setup.py install --prefix=${HOME}/.local

##############
# MATPLOTLIB #
##############

# Libpng needed in order to print png files:
wget http://download.sourceforge.net/libpng/libpng-1.5.10.tar.gz
tar -xvf libpng-1.5.10.tar.gz 
cd  libpng-1.5.10
./configure --prefix=${HOME}/.local
make
make install

#Freetype:
wget http://sourceforge.net/projects/freetype/files/latest/download?source=files
tar -xvf freetype-2.4.9.tar.gz
cd freetype-2.4.9
./configure --prefix=${HOME}/.local
make
make install

wget http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.1.0/matplotlib-1.1.0.tar.gz/download
tar -xvf matplotlib-1.1.0.tar.gz
cd matplotlib-1.1.0
${HOME}/.local/bin/python setup.py install --prefix=${HOME}/.local

#########
# SCIPY #
#########

wget http://sourceforge.net/projects/scipy/files/scipy/0.10.1/scipy-0.10.1.tar.gz/download
tar -xvf scipy-0.10.1.tar.gz
cd scipy-0.10.1
${HOME}/.local/bin/python setup.py config_fc --fcompiler=gnu95 install --prefix=${HOME}/.local


############
# PYTABLES #
############

# Install proper version of numexpr:
wget http://numexpr.googlecode.com/files/numexpr-2.0.1.tar.gz
tar -xvf numexpr-2.0.1.tar.gz
cd numexpr-2.0.1
${HOME}/.local/bin/python setup.py install --prefix=${HOME}/.local

wget http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
tar -xvf bzip2-1.0.6.tar.gz
cd bzip2-1.0.6
make -f Makefile-libbz2_so PREFIX=${HOME}/.local
make install PREFIX=${HOME}/.local

# Install LZO compression utility:
wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz
tar -xvf lzo-2.06.tar.gz
cd lzo-2.06
./configure --enable-shared --prefix=${HOME}/.local
make
make install

# Probably not needed, but just do it in case the system libraries are ooooold.
wget http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.8.8.tar.gz
tar -xvf hdf5-1.8.8.tar.gz
cd hdf5-1.8.8
./configure --prefix=${HOME}/.local
make
make install

wget http://sourceforge.net/projects/pytables/files/pytables/2.3.1/tables-2.3.1.tar.gz/download
tar -xvf tables-2.3.1.tar.gz
cd tables-2.3.1
${HOME}/.local/bin/python setup.py install --lzo=${HOME}/.local --bzip2=${HOME}/.local --hdf5=${HOME}/.local --prefix=${HOME}/.local


############
# MlabWrap #
############

wget http://downloads.sourceforge.net/project/mlabwrap/mlabwrap/mlabwrap-1.1/mlabwrap-1.1.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fmlabwrap%2F&ts=1335985834&use_mirror=garr
tar -xvf mlabwrap-1.1.tar.gz
cd mlabwrap-1.1
(uncomment the line <#define mwSize> in mlabraw.cpp to enable compilation on 64bit platforms)
${HOME}/.local/bin/python setup.py install --prefix=${HOME}/.local

